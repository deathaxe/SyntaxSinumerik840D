%YAML 1.2
# The MIT License (MIT)
#
# Copyright (c) 2016 DeathAxe <deathaxe82@googlemail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
###############################################################################
---
name: Step7 AWL
scope: source.plc.awl
version: 2

extends: Step7 PLC.sublime-syntax

file_extensions:
  - awl

contexts:

###############################################################################
#  GLOBAL FILE TYPES                                                          #
#  =========                                                                  #
#    holds all the following declarations                                     #
#      - DB  : DATA_BLOCK                                                     #
#      - UDT : DATA_TYPE                                                      #
#      - FB  : FUNCTION_BLOCK                                                 #
#      - FC  : FUNCTION                                                       #
#      - OB  : ORGANIZATION_BLOCK                                             #
###############################################################################

  block-udt-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:UDT)\s*\d+\b
      scope: entity.name.type.plc.awl
      pop: 1

  block-db-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:S?DB)\s*\d+\b
      scope: entity.name.datablock.plc.awl
      pop: 1

  block-fb-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:S?F[BC])\s*\d+\b
      scope: entity.name.function.plc.awl
      pop: 1

  block-ob-name:
    - meta_prepend: true
    # absolute address
    - match: \b(?i:OB)\s*\d+\b
      scope: entity.name.type.plc.awl
      pop: 1

  block-body-content:
    - include: awl-networks
    - include: illegal

###############################################################################
# AWL : NETWORK                                                               #
#                                                                             #
#    NETWORK                                                                  #
#    TITLE =The meaning of the code part                                      #
#    // the network comment                                                   #
#    ...                                                                      #
###############################################################################

  awl-networks:
    - match: \b(?i:NETWORK)\b
      scope: keyword.control.network.plc.awl
      push: [awl-network-body, title]

  awl-network-body:
    - meta_scope: meta.block.network.plc.awl
    - match: (?=(?i:NETWORK|END_(?:FUNCTION(?:_BLOCK)?|ORGANIZATION_BLOCK))\b)
      pop: 1
    - include: awl-statements

###############################################################################
# AWL : STATEMENTS                                                            #
###############################################################################

  awl-statements:
    - include: awl-stmt-label
    - include: awl-stmt-block
    - include: awl-stmt-logical
    - include: awl-stmt-assignment
    - include: awl-stmt-bitwise
    - include: awl-stmt-address-register
    - include: awl-stmt-aritmetical
    - include: awl-stmt-goto
    - include: awl-stmt-akku
    - include: awl-stmt-datablock
    - include: awl-stmt-call
    - include: awl-stmt-nop

  awl-stmt-label:
    - match: ^\s*(\w{1,4})(:)
      captures:
        1: entity.name.label.plc.awl
        2: punctuation.terminator.label.plc.awl

  awl-stmt-block:
    # U( , UN( , O(, ON( , X( , XN(
    - match: \b((?i:[OUX]N?))(\()
      captures:
        1: keyword.operator.logical.plc.awl
        2: punctuation.section.block.begin.plc.awl
      push: [awl-stmt-block-body, assert-stmt-end]

  awl-stmt-block-body:
    - meta_scope: meta.block.logical.plc.awl
    - match: \)
      scope: punctuation.section.block.end.plc.awl
      set: assert-stmt-end
    - include: awl-statements

  awl-stmt-nop:
    # NOP 0, BLD
    - match: \b(?i:BLD|NOP)\b
      scope: keyword.operator.nop.plc.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc.awl
        - include: constants-uint16
        - include: assert-stmt-end

  awl-stmt-logical:
    # U , UN , O, ON, X, XN, FP, FN
    - match: \b(?i:[OUX]N?|F[PN])\b
      scope: keyword.operator.logical.plc.awl
      push:
        - meta_content_scope: meta.operand.logical.plc.awl
        - include: operands
        - include: assert-stmt-end
    - match: \b(?i:CLR|NOT|SAVE|SET)\b
      scope: keyword.operator.logical.vke.plc.awl
      push: assert-stmt-end
    # ==I, ==D, <>I, <>D, <=I, <=D, >=I, >=D, <I, <D, >I, >D
    - match: (?:==|<>|<=|>=|<|>)[IDR]
      scope: keyword.operator.logical.plc.awl
      push: assert-stmt-end

  awl-stmt-bitwise:
    # UW, UD, OW, OD, XOW, XOD
    - match: \b(?i:[OU]|XO)[WD]\b
      scope: keyword.operator.bitwise.plc.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc.awl
        - include: constants-hex
        - include: assert-stmt-end
    # INVI, INVD, NEGI, NEGD, NEGR
    - match: \b(?i:INV[ID]|NEG[IDR])\b
      scope: keyword.operator.bitwise.plc.awl
      push: assert-stmt-end
    # RLD, RLDA, RRD, RRDA
    # SLW, SLD, SRW, SRD
    # SSI, SSD
    - match: \b(?i:R[LR]DA?|S[LR][WD]|SS[DI])\b
      scope: keyword.operator.bitwise.plc.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc.awl
        - include: constants-uint16
        - include: assert-stmt-end

  awl-stmt-aritmetical:
    # -I, -D, -R, +I, +D, +R, ...
    - match: '[-+*/][IDR]\b'
      scope: keyword.operator.arithmetic.plc.awl
      push: assert-stmt-end
    # INC, DEC
    - match: \b(?i:INC|DEC)\b
      scope: keyword.operator.arithmetic.plc.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc.awl
        - include: constants-uint16
        - include: assert-stmt-end
    # + 10, + -10, + L#20, + L#-20, + B#16#A
    - match: \+
      scope: keyword.operator.arithmetic.plc.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.plc.awl
        - include: constants-int
        - include: constants-hex
        - include: assert-stmt-end
    # 32-bit floating point operations
    - match: \b(?i:ABS|A?COS|A?SIN|A?TAN|EXP|LN|MOD|SQRT?)\b
      scope: keyword.operator.arithmetic.plc.awl
      push: assert-stmt-end
    # type conversions
    # BTI, ITB, BTD, ITD, DTB, DTR
    # INVI, INVD, NEGI, NEGD, NEGR
    # TAW, TAD
    # RND, RND+ RND-, TRUNC
    - match: \b(?i:IT[BD]|[BD]TI|DT[BR]|RND[-+]?|TRUNC|TA[WD])\b
      scope: keyword.operator.arithmetic.convert.plc.awl
      push: assert-stmt-end

  awl-stmt-assignment:
    # L, LC
    - match: \b(?i:LC?)\b
      scope: keyword.operator.arithmetic.load.plc.awl
      push:
        - meta_content_scope: meta.operand.numeric.plc.awl
        - include: constants
        - include: operands-binary
        - include: operands-counter
        - include: operands-timer
        - include: operands-symbols
        - include: assert-stmt-end
    # T
    - match: \b(?i:T)\b
      scope: keyword.operator.assignment.plc.awl
      push:
        - meta_content_scope: meta.operand.assignment.plc.awl
        - include: operands
        - include: assert-stmt-end
    # =, S, R
    - match: =|\b(?i:[RS])\b
      scope: keyword.operator.assignment.logical.plc.awl
      push:
        - meta_content_scope: meta.operand.marker.plc.awl meta.operand.counter.plc.awl meta.operand.timer.plc.awl
        - include: operands
        - include: assert-stmt-end
    # FR
    - match: \b(?i:FR)\b
      scope: keyword.operator.assignment.logical.plc.awl
      push:
        - meta_content_scope: meta.operand.counter.plc.awl meta.operand.timer.plc.awl
        - include: operands
        - include: assert-stmt-end
    # SA, SE, SI, SS, SV
    - match: \b(?i:S[AEISV]?)\b
      scope: keyword.operator.timer.plc.awl
      push:
        - meta_content_scope: meta.operand.s5time.plc.awl
        - include: operands
        - include: assert-stmt-end
    # ZV, ZR
    - match: \b(?i:Z[RV])\b
      scope: keyword.operator.counter.plc.awl
      push:
        - meta_content_scope: meta.operand.counter.plc.awl
        - include: operands
        - include: assert-stmt-end

  awl-stmt-akku:
    - match: \b(?i:POP|PUSH|TAK|ENT|LEAVE)\b
      scope: keyword.operator.assignment.akku.plc.awl
      push: assert-stmt-end

  awl-stmt-datablock:
    - match: \b(?i:AUF)\b
      scope: keyword.operator.load.db.plc.awl
      push:
        - meta_content_scope: meta.operand.datablock.plc.awl
        - include: operands-datablock
        - include: operands-symbols
        - include: assert-stmt-end
    - match: \b(?i:TDB)\b
      scope: keyword.operator.db.plc.awl
      push: assert-stmt-end

  awl-stmt-address-register:
    # LAR1, LAR2
    - match: \b(?i:LAR)[12]\b
      scope: keyword.operator.load.address-register.plc.awl
      push:
        - meta_content_scope: meta.operand.pointer.plc.awl
        - include: constants-pointer
        - include: operands
        - include: assert-stmt-end
    # TAR1, TAR2
    - match: \b(?i:TAR)[12]\b
      scope: keyword.operator.assignment.address-register.plc.awl
      push:
        - meta_content_scope: meta.operand.pointer.plc.awl
        - include: operands
        - include: assert-stmt-end
    # +AR1, +AR2
    - match: \+(?i:AR)[12]\b
      scope: keyword.operator.arithmetic.address-register.plc.awl
      push:
        - meta_content_scope: meta.operand.pointer.plc.awl
        - include: constants-pointer
        - include: operands
        - include: assert-stmt-end

  awl-stmt-goto:
    # BE, BEA, BEB
    - match: \b(?i:BE[AB]?)\b  # function block end
      scope: keyword.operator.blockend.plc.awl
      push: assert-stmt-end
    - match: |-
          \b(?xi:
              SPL       # case
            | SPA       # always
            | SPBN?B?   # VKE = 1/0
            | SPBIN?    # BIE = 1/0
            | SPO       # OV = 1
            | SPS       # OS = 1
            | SPZ       # result = 0
            | SPN       # result <> 0
            | SPP       # result > 0
            | SPM       # result < 0
            | SPPZ      # result >= 0
            | SPMZ      # result <= 0
            | SPU       # result invalid
            | LOOP      # decrement akku and jump if > 0
          )\b
      scope: keyword.operator.goto.plc.awl
      push:
        - meta_content_scope: meta.operand.goto-label.plc.awl
        - match: \w{1,4}
          scope: entity.name.goto-label.plc.awl
          set: assert-stmt-end
        - include: assert-stmt-end

###[ CALL ]####################################################################

  awl-stmt-call:
    ## CC, UC
    - match: \b(?i:[CU]C)\b
      scope: meta.function-call.plc.awl keyword.control.call.plc.awl
      push:
        - meta_content_scope: meta.function-call.name.plc.awl
        - include: awl-stmt-call-name
        - include: assert-stmt-end
    # CALL
    - match: \b(?i:CALL)\b
      scope: meta.function-call.plc.awl keyword.control.call.plc.awl
      push:
        - meta_content_scope: meta.function-call.name.plc.awl
        - match: ','
          scope: meta.function-call.plc.awl punctuation.separator.sequence.plc.awl
          set: awl-stmt-call-instance
        - include: awl-stmt-call-arguments
        - include: awl-stmt-call-name
        - include: assert-stmt-end

  awl-stmt-call-name:
    # global symbols
    - match: \"
      scope:
        string.quoted.double.plc.awl
        punctuation.definition.string.begin.plc.awl
      push:
        - meta_scope: meta.string.plc.awl
        - meta_content_scope: variable.function.symbol.plc.awl
        - meta_include_prototype: false
        - match: \"
          scope:
            string.quoted.double.plc.awl
            punctuation.definition.string.end.plc.awl
          pop: 1
        - match: '[^"]$'
          scope: invalid.illegal.plc.awl
          pop: 1
    # absolute address
    - match: (?i:S?F[BC])\s*\d+\b
      scope: variable.function.address.plc.awl
    # local variables
    - match: (#)({{ident}})
      captures:
        1: punctuation.definition.variable.begin.plc.awl
        2: variable.function.local.plc.awl

  awl-stmt-call-instance:
    - meta_content_scope: meta.function-call.instance.plc.awl
    - include: awl-stmt-call-arguments
    - include: operands-datablock-absolute
    - include: operands-symbols
    - include: assert-stmt-end

  awl-stmt-call-arguments:
    - match: \(
      scope: punctuation.section.parens.begin.plc.awl
      set: awl-stmt-call-arguments-body

  awl-stmt-call-arguments-body:
    - meta_scope: meta.function-call.arguments.plc.awl meta.parens.plc.awl
    - match: \)
      scope: punctuation.section.parens.end.plc.awl
      set: assert-stmt-end
    - match: :=
      scope: keyword.operator.assignment.plc.awl
      push: arguments-value
    - match: ','
      scope: punctuation.separator.sequence.plc.awl
    - match: '{{ident}}'
      scope: variable.parameter.plc.awl

  arguments-value:
    - match: (?=[,)])
      pop: 1
    - include: constants
    - include: operands-absolute
    - include: operands-symbols
