%YAML 1.2
# The MIT License (MIT)
#
# Copyright (c) 2016 DeathAxe <deathaxe82@googlemail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
###############################################################################
---

# http://facelessuser.github.io/sublime-markdown-popups/textmate_scopes/
# https://manual.macromates.com/en/language_grammars#naming_conventions
# https://www.sublimetext.com/docs/3/scope_naming.html
name: Step7 AWL
scope: source.s7.awl

file_extensions:
  - awl

###############################################################################

variables:
  int: \d+\b(?![.][^.])

  ident: '[[:alpha:]_][[:alnum:]_]*\b'

  context_keywords: |-
    \b(?xi:
      BEGIN
    | VAR  ( _INPUT | _OUTPUT | _IN_OUT | _TEMP )?
    | ( END_ ) ? ( DATABLOCK | FUNCTION ( _BLOCK )? | ORGANIZATION_BLOCK | TYPE )
    )\b


###############################################################################
# MAIN CONTEXT
###############################################################################

contexts:

  main:
    - include: block-db
    - include: block-fb
    - include: block-fc
    - include: block-ob
    - include: block-udt

  prototype:
    - include: comments

###############################################################################
#  GLOBAL FILE TYPES                                                          #
#  =========                                                                  #
#    holds all the following declarations                                     #
#      - DB  : DATA_BLOCK                                                     #
#      - UDT : DATA_TYPE                                                      #
#      - FB  : FUNCTION_BLOCK                                                 #
#      - FC  : FUNCTION                                                       #
#      - OB  : ORGANIZATION_BLOCK                                             #
###############################################################################

###############################################################################
# block level prototypes                                                      #
###############################################################################

  entity-name:
    # quoted string symbol
    - match: \"
      scope: punctuation.definition.string.begin.s7.awl
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.s7.awl
        - meta_content_scope: entity.name.block.s7.awl
        - match: \"
          scope: punctuation.definition.string.end.s7.awl
          pop: true
        - include: illegal-eol
    # absolute address
    - match: \b(?i:OB|S?(?:F[BC]|DB)|UDT)\s*\d+\b
      scope: string.unquoted.s7.awl entity.name.block.s7.awl
      pop: true
    # unquoted string symbol
    - match: '{{ident}}'
      scope: string.unquoted.s7.awl entity.name.block.s7.awl
      pop: true
    - include: scope-end

  return-type:
    - match: ':'
      scope: punctuation.separator.mapping.pair.s7.awl
      set: return-type-content
    - include: line-end

  return-type-content:
    - meta_content_scope: meta.function.return-type.s7.awl
    - include: storage-type
    - include: line-end

  block-body-begin:
    - match: (?i:BEGIN)\b
      scope: keyword.other.begin.s7.awl
      pop: true

###############################################################################
# UDT : TYPE                                                                  #
###############################################################################

  block-udt:
    - match: \b(?i:TYPE)\b
      scope: keyword.other.udt.begin.s7.awl
      push: [block-udt-header, entity-name]

  block-udt-header:
    - meta_scope: meta.block.udt.header.s7.awl
    - include: block-udt-end
    - include: block-udt-header-content
    - include: illegal

  block-udt-header-content:
    - include: punctuation-terminators
    - include: annotations
    - include: attribute
    - include: version
    - include: storage-type-struct
    - include: operands-symbols

  block-udt-end:
    - match: \b(?i:END_TYPE)\b
      scope: keyword.other.udt.end.s7.awl
      set: assert-line-end

###############################################################################
# DB : DATA_BLOCK                                                             #
###############################################################################

  block-db:
    - match: \b(?i:DATA_BLOCK)\b
      scope: keyword.other.db.begin.s7.awl
      push: [block-db-header, title, entity-name]

  block-db-header:
    - meta_scope: meta.block.db.header.s7.awl
    - match: (?=\b(?i:BEGIN)\b)
      set: [block-db-body, assert-line-end, block-body-begin]
    - include: block-db-end
    - include: block-db-hearder-content
    - include: illegal

  block-db-hearder-content:
    - match: \b(?i:NON_RETAIN|READ_ONLY)\b
      scope: entity.other.attribute-name.s7.awl
    - include: punctuation-terminators
    - include: annotations
    - include: attribute
    - include: version
    - include: storage-type-struct
    - include: operands-symbols

  block-db-body:
    - meta_scope: meta.block.db.body.s7.awl
    - include: block-db-end
    - match: '{{ident}}'
      scope: variable.other.local.s7.awl
      push: [block-db-value, struct-members, array-index]
    - include: illegal

  block-db-value:
    # TODO: merge with declaration?
    - match: :=
      scope: keyword.operator.assignment.s7.awl
      set:
        - include: constants
        - include: operands-datablock-absolute
        - include: operands-counter-absolute
        - include: operands-timer-absolute
        - include: string-double-quoted
        - include: assert-stmt-end
    - include: line-end

  block-db-end:
    - match: \b(?i:END_DATA_BLOCK)\b
      scope: keyword.other.db.end.s7.awl
      set: assert-line-end

###############################################################################
# FB : FUNCTION_BLOCK                                                         #
###############################################################################

  block-fb:
    - match: \b(?i:FUNCTION_BLOCK)\b
      scope: keyword.other.fb.begin.s7.awl
      push: [block-fb-header, title, return-type, entity-name]

  block-fb-header:
    - meta_scope: meta.block.fb.header.s7.awl
    - match: (?=\b(?i:BEGIN)\b)
      set: [block-fb-body, assert-line-end, block-body-begin]
    - include: block-fb-end
    - include: block-fb-header-content

  block-fb-header-content:
    - include: annotations
    - include: attribute
    - include: version
    - include: var-input
    - include: var-output
    - include: var-inout
    - include: var-stat
    - include: var-temp

  block-fb-body:
    - meta_scope: meta.block.fb.body.s7.awl
    - include: block-fb-end
    - include: network
    - include: illegal

  block-fb-end:
    - match: \b(?i:END_FUNCTION_BLOCK)\b
      scope: keyword.other.fb.end.s7.awl
      set: assert-line-end

###############################################################################
# FC : FUNCTION                                                               #
###############################################################################

  block-fc:
    - match: \b(?i:FUNCTION)\b
      scope: keyword.other.fc.begin.s7.awl
      push: [block-fc-header, title, return-type, entity-name]

  block-fc-header:
    - meta_scope: meta.block.fc.header.s7.awl
    - match: (?=\b(?i:BEGIN)\b)
      set: [block-fc-body, assert-line-end, block-body-begin]
    - include: block-fc-end
    - include: block-fc-header-content
    - include: illegal

  block-fc-header-content:
    - include: annotations
    - include: attribute
    - include: version
    - include: var-input
    - include: var-output
    - include: var-inout
    - include: var-temp

  block-fc-body:
    - meta_scope: meta.block.fc.body.s7.awl
    - include: block-fc-end
    - include: network
    - include: illegal

  block-fc-end:
    - match: \b(?i:END_FUNCTION)\b
      scope: keyword.other.fc.end.s7.awl
      set: assert-line-end

###############################################################################
# OB : ORGANIZATION_BLOCK                                                     #
###############################################################################

  block-ob:
    - match: \b(?i:ORGANIZATION_BLOCK)\b
      scope: keyword.other.ob.begin.s7.awl
      push: [block-ob-header, title, entity-name]

  block-ob-header:
    - meta_scope: meta.block.ob.header.s7.awl
    - match: (?=\b(?i:BEGIN)\b)
      set: [block-ob-body, assert-line-end, block-body-begin]
    - include: block-ob-end
    - include: block-ob-header-content
    - include: illegal

  block-ob-header-content:
    - include: annotations
    - include: attribute
    - include: version
    - include: var-temp

  block-ob-body:
    - meta_scope: meta.block.ob.body.s7.awl
    - include: block-ob-end
    - include: network
    - include: illegal

  block-ob-end:
    - match: \b(?i:END_ORGANIZATION_BLOCK)\b
      scope: keyword.other.ob.end.s7.awl
      set: assert-line-end

###############################################################################
#  HEADER DATA                                                                #
#  =========                                                                  #
#    all meta data of a datatype/datablock/functionblock/function             #
#                                                                             #
###############################################################################
# ANNOTATION                                                                  #
#   some kind of preprocessor information used to specify global attributes   #
#                                                                             #
# EXAMPLE:                                                                    #
#   { S7_language := '7(1) Deutsch (Deutschland)  22.11.2015  08:22:27' }     #
#                                                                             #
###############################################################################

  annotations:
    - match: \{
      scope: meta.mapping.s7.awl punctuation.section.mapping.begin.s7.awl
      push: annotation-key

  annotation-key:
    - meta_scope: meta.annotation.s7.awl
    - meta_content_scope: meta.mapping.key.s7.awl
    - match: ({{ident}})\s*(.*?)\s*(?=:=)
      captures:
        1: variable.annotation.s7.awl
        2: invalid.illegal.separator-expected.s7.awl
      set: annotation-separator
    - include: annotation-end

  annotation-separator:
    - meta_content_scope: meta.annotation.s7.awl meta.mapping.s7.awl
    - match: :=
      scope: punctuation.separator.key-value.s7.awl
      set: annotation-value
    - include: annotation-end

  annotation-value:
    - meta_content_scope: meta.annotation.s7.awl meta.mapping.value.s7.awl
    - include: string-single-quoted
    - include: annotation-end

  annotation-end:
    - match: \}
      scope:
        meta.annotation.s7.awl meta.mapping.s7.awl
        punctuation.section.mapping.end.s7.awl
      pop: true
    - match: \;
      scope: punctuation.separator.mapping.pair.s7.awl
      set: annotation-key
    - include: illegal

###[ TITLE ]###################################################################

  title:
    - match: \b(?i:TITLE)\b
      scope: entity.other.attribute-name.title.s7.awl
      set: title-separator
    - match: (?=\S)
      pop: true

  title-separator:
    - meta_scope: meta.mapping.key.s7.awl
    - match: =
      scope: punctuation.separator.key-value.title.s7.awl
      set: title-value
    - include: assert-line-end

  title-value:
    - meta_content_scope: meta.mapping.value.s7.awl
    - match: \S.*$
      scope: entity.name.section.s7.awl
    - include: line-end

###[ AUTHOR, FAMILY, NAME ]####################################################

  attribute:
    - match: \b(?i:AUTHOR|FAMILY|NAME)\b
      scope: entity.other.attribute-name.s7.awl
      push: attribute-separator
    - match: \b(?i:CODE_VERSION1|KNOW_HOW_PROTECT)\b
      scope: entity.other.attribute-name.s7.awl
      push: assert-line-end

  attribute-separator:
    - meta_scope: meta.mapping.key.s7.awl
    - match: ':'
      scope: punctuation.separator.key-value.s7.awl
      set: attribute-value
    - include: assert-line-end

  attribute-value:
    - meta_content_scope: meta.mapping.value.s7.awl string.unquoted.s7.awl
    - include: line-end

###[ VERSION ]#################################################################

  version:
    - match: \b(?i:VERSION)\b
      scope: entity.other.attribute-name.version.s7.awl
      push: version-separator

  version-separator:
    - meta_scope: meta.mapping.key.s7.awl
    - match: ':'
      scope: punctuation.separator.key-value.s7.awl
      set: version-value
    - include: assert-line-end

  version-value:
    - meta_content_scope: meta.mapping.value.s7.awl
    - match: (\d+)(\.?)(\d+)
      captures:
        1: constant.numeric.float.version.major.s7.awl
        2: punctuation.separator.decimal.version.s7.awl
        3: constant.numeric.float.version.minor.s7.awl
    - include: assert-line-end

###[ VAR_INPUT ]###############################################################

  var-input:
    - match: \b(?i:VAR_INPUT)\b
      scope: keyword.control.var.input.begin.s7.awl
      push: [var-input-body, assert-line-end]

  var-input-body:
    - meta_scope: meta.block.var.input.s7.awl
    - include: var-body

###[ VAR_OUTPUT ]##############################################################

  var-output:
    - match: \b(?i:VAR_OUTPUT)\b
      scope: keyword.control.var.output.begin.s7.awl
      push: [var-output-body, assert-line-end]

  var-output-body:
    - meta_scope: meta.block.var.output.s7.awl
    - include: var-body

###[ VAR_IN_OUT ]##############################################################

  var-inout:
    - match: \b(?i:VAR_IN_OUT)\b
      scope: keyword.control.var.in-out.begin.s7.awl
      push: [var-inout-body, assert-line-end]

  var-inout-body:
    - meta_scope: meta.block.var.in-out.s7.awl
    - include: var-body

###[ VAR ]#####################################################################

  var-stat:
    - match: \b(?i:VAR)\b
      scope: keyword.control.var.stat.begin.s7.awl
      push: [var-stat-body, assert-line-end]

  var-stat-body:
    - meta_scope: meta.block.var.stat.s7.awl
    - include: var-body

###[ VAR_TEMP ]################################################################

  var-temp:
    - match: \b(?i:VAR_TEMP)\b
      scope: keyword.control.var.temp.begin.s7.awl
      push: [var-temp-body, assert-line-end]

  var-temp-body:
    - meta_scope: meta.block.var.temp.s7.awl
    - include: var-body

###[ END_VAR ]#################################################################

  var-body:
    - match: \b(?i:END_VAR)\b
      scope: keyword.control.var.end.s7.awl
      set: assert-line-end
    - match: (?={{context_keywords}})
      pop: true
    - include: variable-declarations

###[ VARIABLE DECLARATIONS ]###################################################

  variable-declarations:
    - match: '{{ident}}'
      scope: variable.other.s7.awl
      push: variable-separator-name-storage

  variable-separator-name-storage:
    - meta_scope: meta.definition.variable.s7.awl
    - match: ':'
      scope: punctuation.separator.key-value.s7.awl
      set: [assert-stmt-end, variable-storage]
    - include: annotations
    - include: assert-stmt-end

  variable-storage:
    - meta_content_scope: meta.definition.variable.storage.s7.awl
    - match: (?=:=)
      set: variable-separator-storage-value
    - include: storage-type
    - include: scope-end

  variable-separator-storage-value:
    - meta_content_scope: meta.definition.variable.s7.awl
    - match: :=
      scope: keyword.operator.assignment.s7.awl
      set: variable-value

  variable-value:
    - meta_content_scope: meta.definition.variable.value.s7.awl
    - match: ','
      scope: punctuation.separator.sequence.s7.awl
    - include: constants
    - include: string-double-quoted
    - include: scope-end

###[ STORAGE TYPES ]###########################################################

  expect-storage:
    - match: (?=\S)
      set:
        - include: storage-type
        - include: immediately-pop

  storage-type:
    - include: storage-type-atomic
    - include: storage-type-string
    - include: storage-type-pointer
    - include: storage-type-datetime
    - include: storage-type-blocks
    - include: storage-type-struct
    - include: storage-type-array
    - include: storage-type-user

  storage-type-array:
    - match: \b(?i:ARRAY)\b
      scope: storage.type.array.s7.awl
      push: [storage-type-array-meta, storage-type-array-dimension]

  storage-type-array-dimension:
    - match: \[
      scope: punctuation.definition.array.begin.s7.awl
      set:
        - meta_scope: meta.array-size.s7.awl
        - match: \]
          scope: punctuation.definition.array.end.s7.awl
          set: storage-type-array-item
        - match: \.\.
          scope: punctuation.separator.sequence.s7.awl
        - include: constants-uint16
        - include: assert-line-end
    - include: assert-line-end

  storage-type-array-item:
    - match: \b(?i:OF)\b
      scope: keyword.control.of.s7.awl
      set: expect-storage
    - include: assert-line-end

  storage-type-array-meta:
    - meta_scope: meta.sequence.array.s7.awl
    - include: immediately-pop

  storage-type-atomic:
    - match: \b(?i:VOID)\b
      scope: storage.type.void.s7.awl
    - match: \b(?i:BOOL)\b
      scope: storage.type.bool.s7.awl
    - match: \b(?i:BYTE)\b
      scope: storage.type.byte.s7.awl
    - match: \b(?i:CHAR)\b
      scope: storage.type.char.s7.awl
    - match: \b(?i:INT)\b
      scope: storage.type.integer.s7.awl
    - match: \b(?i:WORD)\b
      scope: storage.type.word.s7.awl
    - match: \b(?i:DINT)\b
      scope: storage.type.long.s7.awl
    - match: \b(?i:DWORD)\b
      scope: storage.type.dword.s7.awl
    - match: \b(?i:REAL)\b
      scope: storage.type.real.s7.awl
    - match: \b(?i:COUNTER)\b
      scope: storage.type.counter.s7.awl
    - match: \b(?i:TIMER)\b
      scope: storage.type.timer.s7.awl

  storage-type-blocks:
    - match: \b(?i:BLOCK_S?DB)\b
      scope: storage.type.db.s7.awl
    - match: \b(?i:BLOCK_FB)\b
      scope: storage.type.block-fb.s7.awl
    - match: \b(?i:BLOCK_FC)\b
      scope: storage.type.function.s7.awl

  storage-type-datetime:
    - match: \b(?i:S5TIME)\b
      scope: storage.type.s5time.s7.awl
    - match: \b(?i:TIME)\b
      scope: storage.type.iec-time.s7.awl
    - match: \b(?i:TIME_OF_DAY)\b
      scope: storage.type.time.s7.awl
    - match: \b(?i:DATE_AND_TIME)\b
      scope: storage.type.datetime.s7.awl

  storage-type-pointer:
    - match: \b(?i:ANY)\b
      scope: storage.type.any.s7.awl
    - match: \b(?i:POINTER)\b
      scope: storage.type.pointer.s7.awl

  storage-type-string:
    - match: \b(?i:STRING)\b
      scope: storage.type.string.s7.awl
      push:
        - match: \[
          scope: punctuation.definition.string-size.begin.s7.awl
          set:
            - meta_scope: storage.type.string.s7.awl
            - meta_content_scope: meta.string-size.s7.awl
            - match: \]
              scope: punctuation.definition.string-size.end.s7.awl
              pop: true
            - include: constants-uint16
        - include: scope-end

  storage-type-struct:
    - match: \b(?i:STRUCT)\b
      scope: storage.type.struct.begin.s7.awl
      push: [storage-type-struct-body, assert-line-end]

  storage-type-struct-body:
    - meta_scope: meta.struct.s7.awl
    - match: \b(?i:END_STRUCT)\b
      scope: storage.type.struct.end.s7.awl
      pop: true
    - include: variable-declarations

  storage-type-user:
    # user defined types (UDT, DB, FB)
    - match: (\")(\S+)(\")
      scope: string.quoted.double.s7.awl
      captures:
        1: punctuation.definition.string.begin.s7.awl
        2: storage.type.other.s7.awl
        3: punctuation.definition.string.end.s7.awl
    - match: '{{ident}}'
      scope: storage.type.other.s7.awl

###############################################################################
#  THE MAIN CODE PART                                                         #
#  ==================                                                         #
#  The following paragraph contains all rules to scope the main part of each  #
#  function/function block - the networks and their statements - the code.    #
###############################################################################

###############################################################################
# AWL : NETWORK                                                               #
#                                                                             #
#    NETWORK                                                                  #
#    TITLE =The meaning of the code part                                      #
#    // the network comment                                                   #
#    ...                                                                      #
###############################################################################

  network:
    - match: \b(?i:NETWORK)\b
      scope: keyword.control.network.s7.awl
      push: [network-body, title]

  network-body:
    - meta_scope: meta.block.network.s7.awl
    - match: (?=(?i:NETWORK|END_(?:FUNCTION(?:_BLOCK)?|ORGANIZATION_BLOCK))\b)
      pop: true
    - include: awl-statements

###############################################################################
# AWL : STATEMENTS                                                            #
###############################################################################

  awl-statements:
    - include: awl-stmt-label
    - include: awl-stmt-block
    - include: awl-stmt-logical
    - include: awl-stmt-assignment
    - include: awl-stmt-bitwise
    - include: awl-stmt-address-register
    - include: awl-stmt-aritmetical
    - include: awl-stmt-goto
    - include: awl-stmt-akku
    - include: awl-stmt-datablock
    - include: awl-stmt-call
    - include: awl-stmt-nop

  awl-stmt-label:
    - match: ^\s*(\w{1,4})(:)
      captures:
        1: entity.name.label.s7.awl
        2: punctuation.terminator.label.s7.awl

  awl-stmt-block:
    # U( , UN( , O(, ON( , X( , XN(
    - match: \b((?i:[OUX]N?))(\()
      captures:
        1: keyword.operator.logical.s7.awl
        2: punctuation.section.block.begin.s7.awl
      push: [awl-stmt-block-body, assert-stmt-end]

  awl-stmt-block-body:
    - meta_scope: meta.block.logical.s7.awl
    - match: \)
      scope: punctuation.section.block.end.s7.awl
      set: assert-stmt-end
    - include: awl-statements

  awl-stmt-nop:
    # NOP 0, BLD
    - match: \b(?i:BLD|NOP)\b
      scope: keyword.operator.nop.s7.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.s7.awl
        - include: constants-uint16
        - include: assert-stmt-end

  awl-stmt-logical:
    # U , UN , O, ON, X, XN, FP, FN
    - match: \b(?i:[OUX]N?|F[PN])\b
      scope: keyword.operator.logical.s7.awl
      push:
        - meta_content_scope: meta.operand.logical.s7.awl
        - include: operands
        - include: assert-stmt-end
    - match: \b(?i:CLR|NOT|SAVE|SET)\b
      scope: keyword.operator.logical.vke.s7.awl
      push: assert-stmt-end
    # ==I, ==D, <>I, <>D, <=I, <=D, >=I, >=D, <I, <D, >I, >D
    - match: (?:==|<>|<=|>=|<|>)[IDR]
      scope: keyword.operator.logical.s7.awl
      push: assert-stmt-end

  awl-stmt-bitwise:
    # UW, UD, OW, OD, XOW, XOD
    - match: \b(?i:[OU]|XO)[WD]\b
      scope: keyword.operator.bitwise.s7.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.s7.awl
        - include: constants-hex
        - include: assert-stmt-end
    # INVI, INVD, NEGI, NEGD, NEGR
    - match: \b(?i:INV[ID]|NEG[IDR])\b
      scope: keyword.operator.bitwise.s7.awl
      push: assert-stmt-end
    # RLD, RLDA, RRD, RRDA
    # SLW, SLD, SRW, SRD
    # SSI, SSD
    - match: \b(?i:R[LR]DA?|S[LR][WD]|SS[DI])\b
      scope: keyword.operator.bitwise.s7.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.s7.awl
        - include: constants-uint16
        - include: assert-stmt-end

  awl-stmt-aritmetical:
    # -I, -D, -R, +I, +D, +R, ...
    - match: '[-+*/][IDR]\b'
      scope: keyword.operator.arithmetic.s7.awl
      push: assert-stmt-end
    # INC, DEC
    - match: \b(?i:INC|DEC)\b
      scope: keyword.operator.arithmetic.s7.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.s7.awl
        - include: constants-uint16
        - include: assert-stmt-end
    # + 10, + -10, + L#20, + L#-20, + B#16#A
    - match: \+
      scope: keyword.operator.arithmetic.s7.awl
      push:
        - meta_content_scope: meta.operand.constant.numeric.s7.awl
        - include: constants-int
        - include: constants-hex
        - include: assert-stmt-end
    # 32-bit floating point operations
    - match: \b(?i:ABS|A?COS|A?SIN|A?TAN|EXP|LN|MOD|SQRT?)\b
      scope: keyword.operator.arithmetic.s7.awl
      push: assert-stmt-end
    # type conversions
    # BTI, ITB, BTD, ITD, DTB, DTR
    # INVI, INVD, NEGI, NEGD, NEGR
    # TAW, TAD
    # RND, RND+ RND-, TRUNC
    - match: \b(?i:IT[BD]|[BD]TI|DT[BR]|RND[-+]?|TRUNC|TA[WD])\b
      scope: keyword.operator.arithmetic.convert.s7.awl
      push: assert-stmt-end

  awl-stmt-assignment:
    # L, LC
    - match: \b(?i:LC?)\b
      scope: keyword.operator.arithmetic.load.s7.awl
      push:
        - meta_content_scope: meta.operand.numeric.s7.awl
        - include: constants
        - include: operands-binary
        - include: operands-counter
        - include: operands-timer
        - include: operands-symbols
        - include: assert-stmt-end
    # T
    - match: \b(?i:T)\b
      scope: keyword.operator.assignment.s7.awl
      push:
        - meta_content_scope: meta.operand.assignment.s7.awl
        - include: operands
        - include: assert-stmt-end
    # =, S, R
    - match: =|\b(?i:[RS])\b
      scope: keyword.operator.assignment.logical.s7.awl
      push:
        - meta_content_scope: meta.operand.marker.s7.awl meta.operand.counter.s7.awl meta.operand.timer.s7.awl
        - include: operands
        - include: assert-stmt-end
    # FR
    - match: \b(?i:FR)\b
      scope: keyword.operator.assignment.logical.s7.awl
      push:
        - meta_content_scope: meta.operand.counter.s7.awl meta.operand.timer.s7.awl
        - include: operands
        - include: assert-stmt-end
    # SA, SE, SI, SS, SV
    - match: \b(?i:S[AEISV]?)\b
      scope: keyword.operator.timer.s7.awl
      push:
        - meta_content_scope: meta.operand.s5time.s7.awl
        - include: operands
        - include: assert-stmt-end
    # ZV, ZR
    - match: \b(?i:Z[RV])\b
      scope: keyword.operator.counter.s7.awl
      push:
        - meta_content_scope: meta.operand.counter.s7.awl
        - include: operands
        - include: assert-stmt-end

  awl-stmt-akku:
    - match: \b(?i:POP|PUSH|TAK|ENT|LEAVE)\b
      scope: keyword.operator.assignment.akku.s7.awl
      push: assert-stmt-end

  awl-stmt-datablock:
    - match: \b(?i:AUF)\b
      scope: keyword.operator.load.db.s7.awl
      push:
        - meta_content_scope: meta.operand.datablock.s7.awl
        - include: operands-datablock
        - include: operands-symbols
        - include: assert-stmt-end
    - match: \b(?i:TDB)\b
      scope: keyword.operator.db.s7.awl
      push: assert-stmt-end

  awl-stmt-address-register:
    # LAR1, LAR2
    - match: \b(?i:LAR)[12]\b
      scope: keyword.operator.load.address-register.s7.awl
      push:
        - meta_content_scope: meta.operand.pointer.s7.awl
        - include: constants-pointer
        - include: operands
        - include: assert-stmt-end
    # TAR1, TAR2
    - match: \b(?i:TAR)[12]\b
      scope: keyword.operator.assignment.address-register.s7.awl
      push:
        - meta_content_scope: meta.operand.pointer.s7.awl
        - include: operands
        - include: assert-stmt-end
    # +AR1, +AR2
    - match: \+(?i:AR)[12]\b
      scope: keyword.operator.arithmetic.address-register.s7.awl
      push:
        - meta_content_scope: meta.operand.pointer.s7.awl
        - include: constants-pointer
        - include: operands
        - include: assert-stmt-end

  awl-stmt-goto:
    # BE, BEA, BEB
    - match: \b(?i:BE[AB]?)\b  # function block end
      scope: keyword.operator.blockend.s7.awl
      push: assert-stmt-end
    - match: |-
          \b(?xi:
              SPL       # case
            | SPA       # always
            | SPBN?B?   # VKE = 1/0
            | SPBIN?    # BIE = 1/0
            | SPO       # OV = 1
            | SPS       # OS = 1
            | SPZ       # result = 0
            | SPN       # result <> 0
            | SPP       # result > 0
            | SPM       # result < 0
            | SPPZ      # result >= 0
            | SPMZ      # result <= 0
            | SPU       # result invalid
            | LOOP      # decrement akku and jump if > 0
          )\b
      scope: keyword.operator.goto.s7.awl
      push:
        - meta_content_scope: meta.operand.goto-label.s7.awl
        - match: \w{1,4}
          scope: entity.name.goto-label.s7.awl
          set: assert-stmt-end
        - include: assert-stmt-end

###[ CALL ]####################################################################

  awl-stmt-call:
    ## CC, UC
    - match: \b(?i:[CU]C)\b
      scope: meta.function-call.s7.awl keyword.control.call.s7.awl
      push:
        - meta_content_scope: meta.function-call.name.s7.awl
        - include: awl-stmt-call-name
        - include: assert-stmt-end
    # CALL
    - match: \b(?i:CALL)\b
      scope: meta.function-call.s7.awl keyword.control.call.s7.awl
      push:
        - meta_content_scope: meta.function-call.name.s7.awl
        - match: ','
          scope: punctuation.separator.sequence.s7.awl
          set: awl-stmt-call-instance
        - include: awl-stmt-call-arguments
        - include: awl-stmt-call-name
        - include: assert-stmt-end

  awl-stmt-call-name:
    # global symbols
    - match: \"
      scope:
        string.quoted.double.s7.awl
        punctuation.definition.string.begin.s7.awl
      push:
        - meta_scope: meta.string.s7.awl
        - meta_content_scope: variable.function.symbol.s7.awl
        - meta_include_prototype: false
        - match: \"
          scope:
            string.quoted.double.s7.awl
            punctuation.definition.string.end.s7.awl
          pop: true
        - match: '[^"]$'
          scope: invalid.illegal.s7.awl
          pop: true
    # absolute address
    - match: (?i:S?F[BC])\s*\d+\b
      scope: variable.function.address.s7.awl
    # local variables
    - match: (#)({{ident}})
      captures:
        1: punctuation.definition.variable.begin.s7.awl
        2: variable.function.local.s7.awl

  awl-stmt-call-instance:
    - meta_content_scope: meta.function-call.instance.s7.awl
    - include: awl-stmt-call-arguments
    - include: operands-datablock-absolute
    - include: operands-symbols
    - include: assert-stmt-end

  awl-stmt-call-arguments:
    - match: (?=\()
      set:
        - match: \(
          scope: punctuation.section.parens.begin.s7.awl
          set:
            - meta_scope: meta.function-call.arguments.s7.awl meta.parens.s7.awl
            - match: \)
              scope: punctuation.section.parens.end.s7.awl
              set: assert-stmt-end
            - include: awl-stmt-mapping

###[ MAPPING ]#################################################################

  awl-stmt-mapping:
    - match: '{{ident}}'
      scope: variable.parameter.s7.awl
      push:
        - meta_scope: meta.mapping.key.s7.awl
        - match: (?=:=)
          set: awl-stmt-mapping-separator
        - include: assert-line-end

  awl-stmt-mapping-separator:
    - meta_content_scope: meta.mapping.s7.awl
    - match: :=
      scope: punctuation.separator.key-value.s7.awl
      set: awl-stmt-mapping-value
    - include: awl-stmt-mapping-end

  awl-stmt-mapping-value:
    - meta_content_scope: meta.mapping.value.s7.awl
    - include: constants
    - include: operands-binary-absolute
    - include: operands-counter-absolute
    - include: operands-datablock-absolute
    - include: operands-logical-absolute
    - include: operands-timer-absolute
    - include: operands-symbols
    - include: awl-stmt-mapping-end

  awl-stmt-mapping-end:
    - match: ','
      scope: meta.mapping.s7.awl punctuation.separator.mapping.pair.s7.awl
      pop: true
    - match: (?=\))
      pop: true

###############################################################################
# CONSTANTS                                                                   #
###############################################################################

  constants:
    - include: constants-bool
    - include: constants-hex
    - include: constants-float
    - include: constants-int
    - include: constants-counter
    - include: constants-s5time
    - include: constants-iectime
    - include: constants-datetime
    - include: constants-any
    - include: constants-pointer
    - include: string-single-quoted

  constants-any:
    # P# DB20.DBX40.0 WORD 10
    - match: |-
          (?xi)
            (P(\#))            # pointer prefix
            [ \t]*             # optional space
            (?:
                [AEML]?        # input, output, marker, temp,
              | DB\d+(\.)DBX   # datablock & address
            )
            [ \t]*             # optional space
            \d+(\.)[0-7]       # bit-address
            [ \t]+             # at least one space
            (                  # the data type
                VOID
              | BOOL
              | BYTE|CHAR|INT|WORD|DINT|DWORD
              | REAL|COUNTER|TIMER
              | BLOCK_S?DB|BLOCK_FB|BLOCK_FC
              | S5TIME|DATE_AND_TIME|TIME_OF_DAY|TIME
              | STRING
            )
            [ \t]+             # at least one space
            \d+\b              # element count
      scope: constant.language.any-pointer.s7.awl
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl
        3: punctuation.accessor.dot.s7.awl
        4: punctuation.separator.decimal.s7.awl
        5: storage.type.s7.awl

  constants-pointer:
    # P#10.0 P#M10.0, P#DB20.DBX10.0
    - match: |-
          (?xi)
            (P(\#))                # pointer prefix
            [ \t]*                 # optional space
            (?:
                [AEMLP]?           # input, output, marker, temp, pointer,
              | DIX                # instance address
              | (?:DB\d+(\.))?DBX  # datablock & address
            )
            [ \t]*                 # optional space
            \d+(\.)[0-7]\b         # bit-address
      scope: constant.language.pointer.s7.awl
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl
        3: punctuation.accessor.dot.s7.awl
        4: punctuation.separator.decimal.s7.awl
    # P##LocalSymbol
    - match: ([Pp](#))(#)({{ident}})
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl
        3: punctuation.definition.variable.begin.s7.awl
        4: variable.other.local.s7.awl

  constants-bool:
    - match: \b(?i:TRUE|FALSE)\b
      scope: constant.language.boolean.s7.awl

  constants-float:
    - match: '[-+]?\d+(\.)\d+[Ee][-+]\d+\b'
      scope: constant.numeric.float.decimal.s7.awl
      captures:
        1: punctuation.separator.decimal.s7.awl

  constants-hex:
    - match: 2(#)
      scope: storage.type.numeric.s7.awl
      captures:
        1: punctuation.separator.base.s7.awl
      push:
        - meta_scope: constant.numeric.bin.s7.awl
        - match: (?=\W)
          pop: true
        - match: _
          scope: punctuation.separator.bin.s7.awl
        - match: '[^01_]'
          scope: invalid.illegal.bin.s7.awl
    - match: ((?i:B|byte|W|word|DW|dword)(#))16(#)\h+\b
      scope: constant.numeric.integer.hexadecimal.s7.awl
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl
        3: punctuation.separator.base.s7.awl

  constants-int:
    - match: ([Ll](#))?[-+]?{{int}}
      scope: constant.numeric.integer.decimal.s7.awl
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl

  constants-uint16:
    - match: '{{int}}'
      scope: constant.numeric.integer.decimal.s7.awl

  constants-counter:
    - match: ([Cl](#))\d+\b
      scope: constant.numeric.integer.decimal.s7.awl
      captures:
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.type.s7.awl

###[ S5TIME ]##################################################################

  constants-s5time:
    # S5T#2H_59M_59S_999MS
    # S5TIME#2H_59M_59S_999MS
    - match: (?i:S5T(?:IME)?)(#)
      scope: storage.type.numeric.s7.awl
      captures:
        1: punctuation.separator.type.s7.awl
      push:
        - constants-s5time-meta
        - constants-time-sep
        - constants-time-millisecond
        - constants-time-sep
        - constants-time-second
        - constants-time-sep
        - constants-time-minute
        - constants-time-sep
        - constants-time-hour

  constants-s5time-meta:
    - meta_scope: constant.language.s5time.s7.awl
    - include: immediately-pop

###[ IEC TIME ]################################################################

  constants-iectime:
    # T#24D_23H_59M_59S_999MS
    # TIME#24D_23H_59M_59S_999MS
    - match: (?i:T(?:IME)?)(#)
      scope: storage.type.numeric.s7.awl
      captures:
        1: punctuation.separator.type.s7.awl
      push:
        - constants-iectime-meta
        - constants-time-sep
        - constants-time-millisecond
        - constants-time-sep
        - constants-time-second
        - constants-time-sep
        - constants-time-minute
        - constants-time-sep
        - constants-time-hour
        - constants-time-sep
        - constants-time-day

  constants-iectime-meta:
    - meta_scope: constant.language.iec-time.s7.awl
    - include: immediately-pop

###[ TIME PROTOTYPES ]#########################################################

  constants-time-day:
    - match: (?:[01]?[0-9]|2[0-4])(D)
      scope: constant.language.time.day.s7.awl
      captures:
        1: keyword.other.unit.s7.awl
      pop: true
    - match: (?:((?!//)[^;])+?(?:D|(?=_)))?
      scope: invalid.illegal.time.day.s7.awl
      pop: true

  constants-time-hour:
    - match: (?:[01]?[0-9]|2[0-4])(H)
      scope: constant.language.time.hour.s7.awl
      captures:
        1: keyword.other.unit.s7.awl
      pop: true
    - match: (?:((?!//)[^;])+?(?:H|(?=_)))?
      scope: invalid.illegal.time.hour.s7.awl
      pop: true

  constants-time-minute:
    - match: '[0-5]?\d((?i:M(?!S)))'
      scope: constant.language.time.minute.s7.awl
      captures:
        1: keyword.other.unit.s7.awl
      pop: true
    - match: (?:((?!//)[^;])+?(?i:M(?!S)|(?=_)))?
      scope: invalid.illegal.time.minute.s7.awl
      pop: true

  constants-time-second:
    - match: '[0-5]?\d([Ss])'
      scope: constant.language.time.second.s7.awl
      captures:
        1: keyword.other.unit.s7.awl
      pop: true
    - match: (?:((?!//)[^;])+?(?:[^M]S|(?=_)))?
      scope: invalid.illegal.time.second.s7.awl
      pop: true

  constants-time-millisecond:
    - match: \d{0,3}((?i:MS))
      scope: constant.language.time.millisecond.s7.awl
      captures:
        1: keyword.other.unit.s7.awl
      pop: true
    - match: (?:((?!//)[^;])+?(?i:MS|(?=_)))?
      scope: invalid.illegal.time.millisecond.s7.awl
      pop: true

  constants-time-sep:
    # separator is optional
    - match: _?
      scope: punctuation.separator.time.s7.awl
      pop: true

###[ DATE AND TIME ]###########################################################

  constants-datetime:
    # DT#90-1-1-0:0:0.000
    - match: |-
        (?xi)
        ((?:DT|DATE_AND_TIME)\#)    # preamble
        \d{2,4}(-)                  # year
        (?:0?[1-9]|1[0-2])(-)       # month
        (?:[012]?[1-9]|3[01])(-)    # day
        (?:[01]?[0-9]|2[0-4])(:)    # hour
        (?:[0-5]?[0-9])(:)          # minute
        (?:[0-5]?[0-9])(\.)         # second
        \d{0,3}                     # millisecond
      captures:
        0: constant.language.datetime.s7.awl
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.date.s7.awl
        3: punctuation.separator.date.s7.awl
        4: punctuation.separator.date.s7.awl
        5: punctuation.separator.time.s7.awl
        6: punctuation.separator.time.s7.awl
        7: punctuation.separator.time.s7.awl
    # DATE#90-1-1
    - match: |-
        (?xi)
        (D(?:ATE)?\#)               # preamble
        \d{2,4}(-)                  # year
        (?:0?[1-9]|1[0-2])(-)       # month
        (?:[012]?[1-9]|3[01])\b     # day
      captures:
        0: constant.language.date.s7.awl
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.date.s7.awl
        3: punctuation.separator.date.s7.awl
    # TOD#0:0:0.000
    - match: |-
        (?xi)
        ((?:TOD|TIME_OF_DAY)\#)     # preamble
        (?:[01]?[0-9]|2[0-4])(:)    # hour
        (?:[0-5]?[0-9])(:)          # minute
        (?:[0-5]?[0-9])(\.)         # second
        \d{0,3}\b                   # millisecond
      captures:
        0: constant.language.time-of-day.s7.awl
        1: storage.type.numeric.s7.awl
        2: punctuation.separator.time.s7.awl
        3: punctuation.separator.time.s7.awl
        4: punctuation.separator.time.s7.awl

  string-double-quoted:
    - match: \"
      scope: punctuation.definition.string.begin.s7.awl
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.s7.awl
        - match: \"
          scope: punctuation.definition.string.end.s7.awl
          pop: true
        - include: illegal-eol

  string-single-quoted:
    - match: \'
      scope: punctuation.definition.string.begin.s7.awl
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.s7.awl
        - match: \'
          scope: punctuation.definition.string.end.s7.awl
          pop: true
        - include: illegal-eol

###############################################################################
# OPERANDS                                                                    #
###############################################################################

  operands:
    - include: operands-binary
    - include: operands-counter
    - include: operands-datablock
    - include: operands-logical
    - include: operands-timer
    - include: operands-symbols

###[ DATABLOCK ]###############################################################

  operands-datablock:
    - include: operands-datablock-absolute
    - include: operands-datablock-indirect

  operands-datablock-absolute:
    # DB10, DB 10 : datablocks
    - match: \b(?i:D[BI])[ \t]*{{int}}
      scope: variable.language.db.s7.awl

  operands-datablock-indirect:
    - match: \b(?i:D[BI])(?=[ \t]*\[)
      push:
        - meta_scope: variable.language.db.s7.awl
        - include: address-indirect
        - include: scope-end

###[ BINARY ]##################################################################

  operands-binary:
    - include: operands-binary-absolute
    - include: operands-binary-indirect

  operands-binary-absolute:
    - match: \b(?i:DBNO|DINO|DBLG|DILG|STW)\b
      scope: variable.language.s7.awl
    # EB10, EW10, ED10, PEB10, PEW10, PED10
    # AB10, AW10, AD10, PAB10, PAW10, PAD10
    # MB10, MW10, MD10
    # LB10, LW10, LD10, VB10, VW10, VD10
    # DIW10, DIW10, DID10
    - match: \b(?i:(?:P?[AE]|DI|[LMV])[BWD])[ \t]*{{int}}
      scope: variable.language.address.s7.awl
    # DBB10, DBD10, DBW10, DB3.DBB10, DB3.DIB10, DB3.DBW10
    - match: \b(?i:(DB\d+)(\.))?(DB[BWD][ \t]*{{int}})
      captures:
        1: variable.language.db.s7.awl
        2: punctuation.accessor.dot.s7.awl
        3: variable.language.address.s7.awl

  operands-binary-indirect:
    # B[...], MB [...], LB [...], VB [...], DBB [...], DIB[...], AB[], EB[], PAB[], PEB[]
    # W[...], MW [...], LW [...], VW [...], DIW [...], DIW[...], AW[], EW[], PAW[], PEW[]
    # D[...], MD [...], LD [...], VD [...], DID [...], DID[...], AD[], ED[], PAD[], PED[]
    - match: \b(?i:P?[AE]|D[BI]|[LMV])?[BWD](?=[ \t]*\[)
      push:
        - meta_scope: variable.language.address.s7.awl
        - include: address-indirect
        - include: scope-end

###[ COUNTER ]#################################################################

  operands-counter:
    - include: operands-counter-absolute
    - include: operands-counter-indirect

  operands-counter-absolute:
    # C10, C 10 : counter (english)
    # Z10, Z 10 : counter (german)
    - match: \b(?i:[CZ])[ \t]*{{int}}
      scope: variable.language.counter.s7.awl

  operands-counter-indirect:
    # C[MW10], C [MW10] : counter (english)
    # Z[MW10], Z [MW10] : counter (german)
    - match: \b(?i:[CZ])(?=[ \t]*\[)
      push:
        - meta_scope: variable.language.counter.s7.awl
        - include: address-indirect
        - include: scope-end

###[ LOGICAL ]#################################################################

  operands-logical:
    - include: operands-logical-absolute
    - include: operands-logical-indirect

  operands-logical-absolute:
    # M 10.0, DIX 10.0, L 0.0, ...
    - match: \b(?i:DIX|[AELMV])\s*\d+(\.)\d+
      scope: variable.language.address.s7.awl
      captures:
        1: punctuation.separator.decimal.s7.awl
    # DB10.DBX 10.0
    - match: \b(?i:(DB\d+)(\.))?(DBX[ \t]*\d+(\.){{int}})
      captures:
        1: variable.language.db.s7.awl
        2: punctuation.accessor.dot.s7.awl
        3: variable.language.address.s7.awl
        4: punctuation.separator.decimal.s7.awl
    # status register A0 A1
    - match: (?:==|<>|>=|<=|<|>)0\b
      scope: variable.language.status.s7.awl
    # BIE, OV
    - match: \b(?i:BIE|OV)\b
      scope: variable.language.status.s7.awl

  operands-logical-indirect:
    # DBX [AR1,P#0.0]
    - match: \b(?i:D[BI]X)(?=[ \t]*\[)
      push:
        - meta_scope: variable.language.address.s7.awl
        - include: address-indirect
        - include: scope-end
    # [AR1,P#0.0]
    - include: address-indirect

###[ TIMER ]###################################################################

  operands-timer:
    - include: operands-timer-absolute
    - include: operands-timer-indirect

  operands-timer-absolute:
    # T10, T 10 : timer
    - match: \b[Tt][ \t]*{{int}}
      scope: variable.language.timer.s7.awl

  operands-timer-indirect:
    # T[MW10], T [MW10] : timer
    - match: \b[Tt](?=[ \t]*\[)
      push:
        - meta_scope: variable.language.timer.s7.awl
        - include: address-indirect
        - include: scope-end

###[ SYMBOLS ]#################################################################

  operands-symbols:
    # global symbols
    - match: \"
      scope: 
        string.quoted.double.s7.awl
        punctuation.definition.string.begin.s7.awl
      push: [struct-members, symbols-common]
    # local variables
    - match: (#)({{ident}})
      captures:
        1: punctuation.definition.variable.begin.s7.awl
        2: variable.other.local.s7.awl
      push: [struct-members, array-index]

  symbols-common:
    - meta_scope: meta.string.s7.awl
    - meta_content_scope: variable.other.symbol.s7.awl
    - meta_include_prototype: false
    - match: \"
      scope:
        string.quoted.double.s7.awl
        punctuation.definition.string.end.s7.awl
      pop: true
    - match: '[^"]$'
      scope: invalid.illegal.s7.awl
      pop: true

  struct-members:
    - match: (\.)({{ident}})
      captures:
        1: punctuation.accessor.dot.s7.awl
        2: variable.other.member.s7.awl
      push: array-index
    - include: scope-end

###[ OPERANDS PROTOTYPES ]#####################################################

  address-indirect:
    - match: \[
      scope: punctuation.section.brackets.begin.s7.awl
      push:
        - meta_scope: meta.brackets.s7.awl
        - match: \]
          scope: punctuation.section.brackets.end.s7.awl
          pop: true
        - include: illegal-eol
        - include: constants-pointer
        - include: operands-binary-absolute
        - include: operands-symbols
        - match: \b(?i:AR)[12]\b
          scope: variable.language.address.s7.awl

  array-index:
    # constant array index used in symbols
    - match: \[
      scope: punctuation.section.brackets.begin.s7.awl
      set:
        - meta_scope: meta.brackets.s7.awl
        - match: \]
          scope: punctuation.section.brackets.end.s7.awl
          pop: true
        - include: illegal-eol
        - include: constants-uint16
    - include: scope-end

###############################################################################
# COMMON PROTOTYPES
###############################################################################

  comments:
    - match: //
      scope: punctuation.definition.comment.begin.s7.awl
      push:
        - meta_scope: comment.line.double-slash.s7.awl
        - include: line-end
    - match: \(\*
      scope: punctuation.definition.comment.begin.s7.awl
      push:
        - meta_scope: comment.block.double-slash.s7.awl
        - match: \*\)
          scope: punctuation.definition.comment.end.s7.awl
          pop: true

  immediately-pop:
    - match: ''
      pop: true

  scope-end:
    - match: $|(?=\S)
      pop: true

  line-end:
    - match: $
      pop: true

  line-end-or-illegal:
    - include: line-end
    - include: illegal

  assert-line-end:
    - include: line-end
    # mark rest of the line as illegal beginning with the first
    # none whitespace letter
    - match: \S.*?(?=//|$)
      scope: invalid.illegal.eol-expected.s7.awl
      pop: true

  assert-stmt-end:
    - match: ;
      scope: punctuation.terminator.statement.s7.awl
      set: assert-line-end
    - match: \S[^;\s]*
      scope: invalid.illegal.terminator-expected.s7.awl
    - include: illegal-eol

  punctuation-terminators:
    - match: ;
      scope: punctuation.terminator.statement.s7.awl

###############################################################################
# ILLEAGAL
###############################################################################

  illegal:
    - include: illegal-brackets
    - match: \S
      scope: invalid.illegal.s7.awl

  illegal-brackets:
    - include: illegal-paren
    - include: illegal-square

  illegal-paren:
    - match: \(
      push:
        - meta_scope: invalid.illegal.group.s7.awl
        - match: \)|$
          pop: true
        - include: ignore-parens

  illegal-square:
    - match: \[
      push:
        - meta_scope: invalid.illegal.array.s7.awl
        - match: \]|$
          pop: true
        - include: ignore-square

  illegal-eol:
    - match: $\n?
      scope: invalid.illegal.eol.s7.awl
      pop: true

###############################################################################
# IGNORED NESTED PARENTHESES AND BRAKETS
# expressions withing ( ... ) or [ ... ]
###############################################################################

  ignore-parens:
    - match: \(
      push:
        - match: \)|$
          pop: true
        - include: ignore-parens

  ignore-square:
    - match: \[
      push:
        - match: \]|$
          pop: true
        - include: ignore-square
